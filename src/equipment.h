/*!
	\file equipment.h Description of base classes SpaceArena::Equipment, SpaceArena::EquipmentSlot and derivatives
*/

#ifndef _EQUIPMENT_H_
#define _EQUIPMENT_H_

#include "ogre.h"
#include <set>

namespace SpaceArena {

/// Possible types of equipment
enum EQUIPMENT_TYPE { EQ_UNKNOWN, EQ_DRIVE, EQ_ENERGY_CELL, EQ_WEAPON, EQ_AMMO };

/*! 
    \class SpaceArena::Equipment
    \brief Spaceship equipment.

	Space ship equipment - drives, weapon, powercells
*/
class Equipment
{
public:
	/// Default constructor
	Equipment() { _ID = ""; _type = EQ_UNKNOWN; _name = ""; _description = ""; };
	/// Copy constructor
	Equipment(const Equipment& src);
	/// Creates equipment of given type with given name
	Equipment(Ogre::String ID, EQUIPMENT_TYPE type, Ogre::String name, Ogre::String description) { _ID = ID; _type = type; _name = name; _description = description; };
	/// Destructor
	~Equipment() {};
	/// Return equipment ID
	Ogre::String getID() { return _ID; };
	/// Return type of equipment
	EQUIPMENT_TYPE getType() { return _type; };
	/// Return equipment name
	Ogre::String getName() { return _name; };
	/// Return equipment description
	Ogre::String getDescription() { return _description; };
	void operator =(const Equipment& other);
private:
	/// Equipment ID (usually short string)
	Ogre::String _ID;
	/// Equipment type
    EQUIPMENT_TYPE _type;
	/// Equipment name (full name of equipment, not very long)
	Ogre::String _name;
	/// Extended description of a equipment, may be very long
	Ogre::String _description;
};

/*! 
    \class SpaceArena::DriveEquipment
    \brief Equipment of type 'Drive'

    Drive is used to move spaceship in space
*/
class DriveEquipment : public Equipment
{
public:
	DriveEquipment(Ogre::String ID, EQUIPMENT_TYPE type, Ogre::String name, Ogre::String description) : Equipment(ID, type, name, description) { _longitudinalThrust = 0; _transversalThrust = 0; };
	void setLongitudinalThrust(Ogre::Real value) { _longitudinalThrust = value; };
	void setTransversalThrust(Ogre::Real value) { _transversalThrust = value; };
	Ogre::Real getLongitudinalThrust() { return _longitudinalThrust; };
	Ogre::Real getTransversalThrust() { return _transversalThrust; };
private:
	Ogre::Real _longitudinalThrust;
	Ogre::Real _transversalThrust;
};

/*! 
    \class SpaceArena::EnergyEquipment
    \brief Equipment of type 'Energy'

    Energy equipment is used to charge shields and capacitor, which is used by energy
	weapons like lasers or plasma guns.
*/
class EnergyEquipment : public Equipment
{
public:
	EnergyEquipment(Ogre::String ID, EQUIPMENT_TYPE type, Ogre::String name, Ogre::String description) : Equipment(ID, type, name, description) { _power = 0; };
	void setPower(Ogre::Real value) { _power = value; };
	Ogre::Real getPower() { return _power; };
private:
	/// Power, generated by this unit
	Ogre::Real _power;
};

/*! 
    \class SpaceArena::WeaponEquipment
    \brief Equipment of type 'Weapon'

    Weapon is a means of attack and destroying of enemy objects.
	Can be enery or projectile. Energy weapon uses a built-in spaceship capacitor, which
	is charged by installed energy equipment. Projectile weapon uses ammunition equipment.
*/
class WeaponEquipment : public Equipment
{
public:
	WeaponEquipment() : Equipment("", EQ_UNKNOWN, "", "") { _ammunitionID = ""; };
	WeaponEquipment(Ogre::String ID, EQUIPMENT_TYPE type, Ogre::String name, Ogre::String description) : Equipment(ID, type, name, description) { _ammunitionID = ""; };
	/// Set ammunition ID for this weapon
	void setAmmunitionID(Ogre::String value) { _ammunitionID = value; };
	/// Return ammunition ID for this weapon
	Ogre::String getAmmunitionID() { return _ammunitionID; };
	/// Set space object template name for weapon projectiles
	void setTemplateName(Ogre::String value) { _objectTemplate = value; };
	/// Return space object template name for weapon projectiles
	Ogre::String getTemplateName() { return _objectTemplate; };
	/// Set TTL
	inline void setTTL(Ogre::Real ttl) { _ttl = ttl; };
	/// Get remaining TTL
	inline Ogre::Real getTTL() { return _ttl; };
	/// Set fire period
	inline void setFirePeriod(Ogre::Real firePeriod) { _firePeriod = firePeriod; };
	/// Get fire period
	inline Ogre::Real getFirePeriod() { return _firePeriod; };
private:
	/// Name of space object template
	Ogre::String _objectTemplate;
	/// ID of ammunition, used by weapon. Special value of '_energy_' means, that this is a
	/// energy weapon
	Ogre::String _ammunitionID;
	/// Weapon projectile TTL (in sec)
	/// For energy weapon has no meaning (Its TTL is limited with capacitor charge)
	Ogre::Real _ttl;
	/// Weapon period of fire (seconds)
	Ogre::Real _firePeriod;
};

/*! 
    \class SpaceArena::AmmunitionEquipment
    \brief Equipment of type 'Ammunition'

    Ammunition is used in weapons. Ammunition equipment can be standalone (missile) or
    represent an ammunition magazine (miscellanous guns etc.)
*/
class AmmunitionEquipment : public Equipment
{
public:
	AmmunitionEquipment(Ogre::String ID, EQUIPMENT_TYPE type, Ogre::String name, Ogre::String description) : Equipment(ID, type, name, description) { _numCartridges = 0; };
	void setNumCartridges(Ogre::Real value) { _numCartridges = value; };
	Ogre::Real getNumCartridges() { return _numCartridges; };
	void setThrust(Ogre::Real value) { _thrust = value; };
	Ogre::Real getThrust() { return _thrust; };
	void setExplosiveEnergy(Ogre::Real value) { _explosiveEnergy = value; };
	Ogre::Real getExplosiveEnergy() { return _explosiveEnergy; };
private:
	/// Number of cartridges in the magazine. One means standalone cartridge (missile, for
	/// example)
	Ogre::Real _numCartridges;
	/// Projectile acceleration while launched
	Ogre::Real _thrust;
	/// Projectile explosive energy
	Ogre::Real _explosiveEnergy;
};

/*! 
    \class SpaceArena::EquipmentSlot
    \brief Slot for spaceship equipment.

	Every spaceship has a equipment slots. Equipment can be installed only in slots.
*/
class EquipmentSlot
{
public:
	/// Constructor
	EquipmentSlot(EQUIPMENT_TYPE type) { _installedEquipment = NULL; _shemePosition = Ogre::Vector3::ZERO; _type = type; };
	/// Copy constructor
	EquipmentSlot(const EquipmentSlot& src);
	/// Задает тип слота
	void setType(EQUIPMENT_TYPE type) { _type = type; };
	/// Return type of slot
	EQUIPMENT_TYPE getType() { return _type; };
	/// Set arrangement of a slot on ship sheme
	void setShemePosition(Ogre::Vector3 shemePosition) { _shemePosition = shemePosition; };
	/// Return arrangement of a slot on ship sheme
	Ogre::Vector3 getShemePosition() { return _shemePosition; };
	/// Install equipment with ID in a slot. If ID == "", then equipment is removed from slot.
	void installEquipment(Ogre::String ID);
	/// Return pointer to installed euipment instance or NULL, if nothing installed.
	Equipment* getInstalledEquipment() { return _installedEquipment; };
	/// Destructor
	virtual ~EquipmentSlot() {};
private:
	/// Type of a slot (in slot of specified type may be installed only equipment with suitable type)
    EQUIPMENT_TYPE _type;
	/// Coordinates of center of a slot on ship sheme
	Ogre::Vector3 _shemePosition;
	/// Installed equipment (NULL, if slot is empty)
	Equipment* _installedEquipment;
};

/*! 
    \class SpaceArena::HoldSlot
    \brief Slot for spaceship's hold.

	Every spaceship has a hold, which may contain infinite amount of equipment
*/
class HoldSlot : public EquipmentSlot
{
public:
	/// Constructor
	HoldSlot() : EquipmentSlot(EQ_UNKNOWN) { _amount = 0; };
	/// Устанавливает указанное оборудование в указанном количестве в слот. Если ID == "", то оборудование вынимается из слота.
	void installEquipment(Ogre::String ID, Ogre::uint amount) { EquipmentSlot::installEquipment(ID); _amount = amount; };
	/// Set amount of equipment in slot
	void setAmount(Ogre::Real value) { _amount = value; };
	/// Get amount of equipment in slot
	Ogre::Real getAmount() { return _amount; };
	/// Деструктор класса
	virtual ~HoldSlot() {};
private:
	/// Amount of equipment in a slot
	Ogre::uint _amount;
};

extern std::map<Ogre::String, Equipment*> equipments;

}; // namespace SpaceArena

#endif // _EQUIPMENT_H_